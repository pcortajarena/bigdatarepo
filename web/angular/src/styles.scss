@import "app/scss/_variables";
@import "app/scss/_mixins";
@import "~bootstrap/scss/functions";
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/mixins";
@import "~bootstrap/scss/reboot";
@import "~bootstrap/scss/grid";
// add css utilities
@import "~bootstrap/scss/utilities";
@import "app/scss/_reset";
/*
https://material.angular.io/guide/getting-started
Step 4: Include a theme
Including a theme is required to apply all of the core and theme styles to your application.
*/
//@import '@angular/material/prebuilt-themes/deeppurple-amber.css';
//@import "~@angular/material/prebuilt-themes/indigo-pink.css";
@import '~@angular/material/theming';
@import '/app/scss/theme';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$app-primary: mat-palette($md-tcprimary);
$app-accent:  mat-palette($md-tcaccent);

// The warn palette is optional (defaults to red).
$app-warn: mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$tc-app-theme: mat-light-theme($app-primary, $app-accent, $app-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($tc-app-theme);


@import "app/scss/generics";
